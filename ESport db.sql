-- MySQL Script generated by MySQL Workbench
-- Tue Dec 28 19:33:37 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema esports
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema esports
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `esports` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `esports` ;

-- -----------------------------------------------------
-- Table `esports`.`sponsor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `esports`.`sponsor` (
  `Nome` VARCHAR(50) NOT NULL,
  `Tipo` VARCHAR(30) NULL DEFAULT NULL,
  PRIMARY KEY (`Nome`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `esports`.`squadra`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `esports`.`squadra` (
  `nome` VARCHAR(50) NOT NULL,
  `Nazionalità` VARCHAR(50) NOT NULL,
  `Anno_fondazione` YEAR NOT NULL,
  PRIMARY KEY (`nome`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `esports`.`accordo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `esports`.`accordo` (
  `Codice` INT NOT NULL AUTO_INCREMENT,
  `Premio` FLOAT NOT NULL,
  `Scadenza` DATE NOT NULL,
  `Sponsor` VARCHAR(50) NOT NULL,
  `Squadra` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`Codice`),
  CONSTRAINT `accordo_ibfk_1`
    FOREIGN KEY (`Sponsor`)
    REFERENCES `esports`.`sponsor` (`Nome`),
  CONSTRAINT `accordo_ibfk_2`
    FOREIGN KEY (`Squadra`)
    REFERENCES `esports`.`squadra` (`nome`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE UNIQUE INDEX `Squadra_Sponsor_UNIQUE` ON `esports`.`accordo` (`Squadra` ASC, `Sponsor` ASC) INVISIBLE;


-- -----------------------------------------------------
-- Table `esports`.`allenatore`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `esports`.`allenatore` (
  `Id` INT NOT NULL AUTO_INCREMENT,
  `Nome` VARCHAR(50) NOT NULL,
  `Cognome` VARCHAR(50) NOT NULL,
  `Data_nascita` DATE NOT NULL,
  `Nazionalità` VARCHAR(50) NULL DEFAULT NULL,
  `Tipo` ENUM('MENTAL COACH', 'ASSISTANT COACH', 'POSITION COACH', 'STRATEGIC COACH', 'HEAD COACH') NOT NULL,
  `Data_inizio` DATE NOT NULL,
  `Stipendio` FLOAT NOT NULL,
  `Squadra` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`Id`),
  CONSTRAINT `allenatore_ibfk_1`
    FOREIGN KEY (`Squadra`)
    REFERENCES `esports`.`squadra` (`nome`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `esports`.`campioni`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `esports`.`campioni` (
  `Nome` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`Nome`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `esports`.`giocatore`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `esports`.`giocatore` (
  `Id` VARCHAR(25) NOT NULL,
  `Nome` VARCHAR(50) NOT NULL,
  `Cognome` VARCHAR(50) NOT NULL,
  `Sesso` ENUM('M','F') NOT NULL,
  `Data_di_nascita` DATE NOT NULL,
  `Nazionalità` VARCHAR(40) NOT NULL,
  `Ruolo` ENUM('Top', 'Jng', 'Mid', 'Adc', 'Supp') NOT NULL,
  PRIMARY KEY (`Id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `esports`.`contratto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `esports`.`contratto` (
  `Codice` INT NOT NULL AUTO_INCREMENT,
  `Data_inizio` DATE NOT NULL,
  `Data_fine` DATE NOT NULL,
  `Stipendio` FLOAT NOT NULL,
  `Scaduto` TINYINT(1) NOT NULL DEFAULT 0,
  `Squadra` VARCHAR(50) NOT NULL,
  `Giocatore` VARCHAR(25) NOT NULL,
  PRIMARY KEY (`Codice`),
  CONSTRAINT `contratto_ibfk_1`
    FOREIGN KEY (`Squadra`)
    REFERENCES `esports`.`squadra` (`nome`),
  CONSTRAINT `contratto_ibfk_2`
    FOREIGN KEY (`Giocatore`)
    REFERENCES `esports`.`giocatore` (`Id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE UNIQUE INDEX `Squadra_Giocatore_index` ON `esports`.`contratto` (`Giocatore` ASC, `Squadra` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `esports`.`torneo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `esports`.`torneo` (
  `Nome` VARCHAR(50) NOT NULL,
  `tipo` ENUM('REGIONALE','NAZIONALE','MONDIALE') NOT NULL,
  `Montepremi` FLOAT NULL DEFAULT 0,
  PRIMARY KEY (`Nome`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `esports`.`edizioni_torneo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `esports`.`edizioni_torneo` (
  `Torneo` VARCHAR(50) NOT NULL,
  `Anno` YEAR NOT NULL,
  `Data_inizio` DATE NOT NULL,
  `Data_fine` DATE NOT NULL,
  `Squadra_vincitrice` VARCHAR(50) NULL DEFAULT NULL,
  PRIMARY KEY (`Torneo`, `Anno`),
  CONSTRAINT `edizioni_torneo_ibfk_1`
    FOREIGN KEY (`Torneo`)
    REFERENCES `esports`.`torneo` (`Nome`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `esports`.`statistiche`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `esports`.`statistiche` (
  `Giocatore` VARCHAR(25) NOT NULL,
  `Uccisioni` INT NOT NULL,
  `Morti` INT NOT NULL,
  `Assist` INT NOT NULL,
  PRIMARY KEY (`Giocatore`),
  CONSTRAINT `statistiche_ibfk_1`
    FOREIGN KEY (`Giocatore`)
    REFERENCES `esports`.`giocatore` (`Id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `esports`.`giocati`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `esports`.`giocati` (
  `Giocatore` VARCHAR(25) NOT NULL,
  `Campione` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`Giocatore`, `Campione`),
  CONSTRAINT `giocati_ibfk_1`
    FOREIGN KEY (`Giocatore`)
    REFERENCES `esports`.`statistiche` (`Giocatore`),
  CONSTRAINT `giocati_ibfk_2`
    FOREIGN KEY (`Campione`)
    REFERENCES `esports`.`campioni` (`Nome`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `Campione` ON `esports`.`giocati` (`Campione` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `esports`.`staff`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `esports`.`staff` (
  `Id` INT NOT NULL AUTO_INCREMENT,
  `Nome` VARCHAR(50) NOT NULL,
  `Cognome` VARCHAR(50) NOT NULL,
  `Data_nascita` DATE NOT NULL,
  `Incarico` VARCHAR(50) NULL DEFAULT NULL,
  `Stipendio` FLOAT NULL DEFAULT NULL,
  `Data_inizio` DATE NOT NULL,
  `Proprietario` TINYINT(1) NULL DEFAULT NULL,
  `Squadra` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`Id`),
  CONSTRAINT `staff_ibfk_1`
    FOREIGN KEY (`Squadra`)
    REFERENCES `esports`.`squadra` (`nome`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `Squadra` ON `esports`.`staff` (`Squadra` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `esports`.`manager`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `esports`.`manager` (
  `id` INT NOT NULL,
  `Reparto` VARCHAR(30) NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `manager_ibfk_1`
    FOREIGN KEY (`id`)
    REFERENCES `esports`.`staff` (`Id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `esports`.`partita`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `esports`.`partita` (
  `Codice` INT NOT NULL AUTO_INCREMENT,
  `Turno` TINYINT NOT NULL,
  `Fase` ENUM('FASE A GIRONI', 'OTTAVI', 'QUARTI', 'SEMIFINALE', 'FINALE') NOT NULL,
  `Risultato` VARCHAR(10) NULL DEFAULT NULL,
  `Data_partita` DATE NOT NULL,
  `Torneo` VARCHAR(50) NOT NULL,
  `Anno_torneo` YEAR NOT NULL,
  `Squadra1` VARCHAR(50) NOT NULL,
  `Squadra2` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`Codice`),
  CONSTRAINT `partita_ibfk_1`
    FOREIGN KEY (`Torneo` , `Anno_torneo`)
    REFERENCES `esports`.`edizioni_torneo` (`Torneo` , `Anno`),
  CONSTRAINT `partita_ibfk_2`
    FOREIGN KEY (`Squadra1`)
    REFERENCES `esports`.`squadra` (`nome`),
  CONSTRAINT `partita_ibfk_3`
    FOREIGN KEY (`Squadra2`)
    REFERENCES `esports`.`squadra` (`nome`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `Torneo` ON `esports`.`partita` (`Torneo` ASC, `Anno_torneo` ASC) INVISIBLE;

CREATE INDEX `Squadra1` ON `esports`.`partita` (`Squadra1` ASC) VISIBLE;

CREATE INDEX `Squadra2` ON `esports`.`partita` (`Squadra2` ASC) VISIBLE;

CREATE UNIQUE INDEX `data_partita_unique` ON `esports`.`partita` (`Data_partita` ASC, `Squadra1` ASC, `Squadra2` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `esports`.`vinto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `esports`.`vinto` (
  `Giocatore` VARCHAR(25) NOT NULL,
  `Torneo` VARCHAR(50) NOT NULL,
  `Anno` YEAR NOT NULL,
  PRIMARY KEY (`Giocatore`, `Torneo`, `Anno`),
  CONSTRAINT `vinto_ibfk_1`
    FOREIGN KEY (`Giocatore`)
    REFERENCES `esports`.`giocatore` (`Id`),
  CONSTRAINT `vinto_ibfk_2`
    FOREIGN KEY (`Torneo` , `Anno`)
    REFERENCES `esports`.`edizioni_torneo` (`Torneo` , `Anno`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `Torneo` ON `esports`.`vinto` (`Torneo` ASC, `Anno` ASC) INVISIBLE;

USE `esports` ;

-- -----------------------------------------------------
-- function rateo
-- -----------------------------------------------------

DELIMITER $$
USE `esports`$$
CREATE function rateo(u int, m int, a int)
returns float(2)
deterministic
language sql
no sql
BEGIN
	DECLARE rateo float(2);
    SET rateo = (u+a)/m;
    RETURN rateo;
END$$

DELIMITER ;
USE `esports`;

DELIMITER $$
USE `esports`$$
CREATE DEFINER = CURRENT_USER TRIGGER `esports`.`Check_new_player`
BEFORE INSERT ON `contratto` FOR EACH ROW
BEGIN
	if ((select count(*) from Contratti 
			where(new.Squadra = Squadra and 
			Scaduto = 0)) >= 7) then
		signal sqlstate '45000' 
        set message_text = 'Impossibile aggiungere nuovo giocatore, la squadra ha raggiunto il massimo di giocatori nella rosa';
	end if;
END$$

USE `esports`$$
CREATE DEFINER = CURRENT_USER TRIGGER `esports`.`Aggiornamento_scadenza` 
AFTER INSERT ON `contratto` 
FOR EACH ROW  
BEGIN
	UPDATE contratto SET Scaduto = 1 WHERE Data_fine > GETDATE();
END$$

USE `esports`$$
CREATE DEFINER = CURRENT_USER TRIGGER `esports`.`Scadenza_rescissione` 
AFTER UPDATE ON `contratto` 
FOR EACH ROW
BEGIN
	 UPDATE contratto SET Scaduto = 1 WHERE Data_fine > GETDATE();
END$$

USE `esports`$$
CREATE DEFINER = CURRENT_USER TRIGGER `esports`.`Check_edition_after2011` BEFORE INSERT ON `edizioni_torneo`
FOR EACH ROW
BEGIN
	IF (Anno < 2011) THEN
		signal sqlstate '45000' set message_text = 'Non esistono tornei con data antecedente al 2011';
    END IF;
END$$

USE `esports`$$
CREATE DEFINER = CURRENT_USER TRIGGER `esports`.`NewStaff`
BEFORE INSERT ON `staff` FOR each row
BEGIN
	  IF (new.Stipendio >= (select Stipendio from Staff where (Proprietario=1 and 					Squadra=new.Squadra)))  Then
                   signal sqlstate '45000' set message_text = 'Il nuovo dipendente non può avere stipendio maggiore del proprietario della squadra';
          End IF;
END$$

USE `esports`$$
CREATE DEFINER = CURRENT_USER TRIGGER `esports`.`UpdateStaff` BEFORE UPDATE ON `staff` FOR EACH ROW
BEGIN
IF (new.Stipendio >= (select Stipendio from Staff where (Proprietario=1 and	Squadra=new.Squadra)))  Then
                   signal sqlstate '45000' set message_text = 'Il dipendente non può avere stipendio maggiore del proprietario della squadra';
          End IF;
END$$

USE `esports`$$
CREATE DEFINER = CURRENT_USER TRIGGER `esports`.`Check_date_after_2011` BEFORE INSERT ON `partita` FOR EACH ROW
BEGIN
	IF (year(data_partita) < 2011) THEN
		signal sqlstate '45000' set message_text = 'Non esistono partite con data antecedente al 2011';
    END IF;
END$$

USE `esports`$$
CREATE DEFINER = CURRENT_USER TRIGGER `esports`.`Check_Tournament_Date`
BEFORE INSERT ON `partita` 
FOR EACH ROW
BEGIN
	IF(new.Anno_torneo <> year(Data_partita)) then
		signal sqlstate '45000' set message_text = 'L\'anno inserito non corrisponde all\'edizione del torneo'; -- controllo preliminare sull'anno della partita
        
	ELSE
    
		SET @inizio = (select Data_inizio from Edizioni_torneo
        where (Torneo = new.Torneo and Anno = new.Anno_torneo)); -- Salvo la data di inizio dell'edizione del torneo
         SET @fine = (select Data_fine from Edizioni_torneo
        where (Torneo = new.Torneo and Anno = new.Anno_torneo)); -- Salvo la data di fine dell'edizione del torneo
        
        IF(new.Data_partita < @inizio or new.Data_partita > @fine) then
			signal sqlstate '45000' set message_text = 'La data non coincide con l\'edizione del torneo inserito';
        END IF;
        
    END IF;
END$$

USE `esports`$$
CREATE DEFINER = CURRENT_USER TRIGGER `esports`.`Check_Tournament_validity` 
BEFORE INSERT ON `partita` 
FOR EACH ROW
BEGIN
	SET @inizio = (select Data_inizio from Edizioni_torneo
		where (Torneo = new.Torneo and Anno = new.Anno_torneo)); -- Salvo la data di inizio dell'edizione del torneo
	SET @fine = (select Data_fine from Edizioni_torneo
        where (Torneo = new.Torneo and Anno = new.Anno_torneo)); -- Salvo la data di fine dell'edizione del torneo
	
	-- Controllo Squadra 1 --

	SET @dateLM1 = (select ((select Data_partita from Partita
    where (new.Squadra1 = Squadra1 or new.Squadra1 = Squadra2) 
    order by Data_partita DESC
    limit 1))); -- Memorizzo la data dell'ultimo match. Se non è presente, ritorna null
	
    SET @tournamentLM1 = (select ((select Torneo from Partita
    where (new.Squadra1 = Squadra1 or new.Squadra1 = Squadra2) 
    order by Data_partita DESC
    limit 1))); -- Memorizzo il torneo dell'ultiomo match giocato. Se non è presente, ritorna null
    
    
    IF (@tournamentLM1 <> new.Torneo) THEN
		IF (@dateLM1 >= @inizio and @dateLM1 <= @fine) THEN
			signal sqlstate '45000' set message_text = 'La partita inserita si disputa contemporaneamente ad un torneo alla quale la squadra sta partecipando. Impossibile eseguire l\'inserimento';
        END IF;
    END IF;
    
    -- Controllo Squadra 2 --
    
	SET @dateLM2 = (select ((select Data_partita from Partita
    where (new.Squadra2 = Squadra1 or new.Squadra2 = Squadra2) 
    order by Data_partita DESC
    limit 1))); -- Memorizzo la data dell'ultimo match. Se non è presente, ritorna null
	
    SET @tournamentLM2 = (select ((select Torneo from Partita
    where (new.Squadra2 = Squadra1 or new.Squadra2 = Squadra2) 
    order by Data_partita DESC
    limit 1))); -- Memorizzo il torneo dell'ultiomo match giocato. Se non è presente, ritorna null
    
    IF (@tournamentLM2 <> new.Torneo) THEN
		IF (@dateLM2 >= @inizio and @dateLM2 <= @fine) THEN
			signal sqlstate '45000' set message_text = 'La partita inserita si disputa contemporaneamente ad un torneo alla quale la squadra sta partecipando. Impossibile eseguire l\'inserimento';
        END IF;
    END IF;

END$$

USE `esports`$$
CREATE DEFINER = CURRENT_USER TRIGGER `esports`.`Check_phase_date` BEFORE INSERT ON `partita` FOR EACH ROW
BEGIN
	SET @lastPhase =  (select fase from Partita 
						where (new.Torneo = Torneo and new.Anno_Torneo = Anno_torneo)
						Order by Data_partita DESC
						limit 1);
	SET @lastDate = (select Data_partita from Partita 
					where (new.Torneo = Torneo and new.Anno_Torneo = Anno_torneo)
					Order by Data_partita DESC
					limit 1);
        
	IF (new.fase != @lastPhase)THEN
		IF (new.Data_partita < @lastDate) THEN -- controllo l'inserimento di una partita con data antecedente a quella dell'ultima partita nel db
			CASE new.fase
				WHEN 'OTTAVI' THEN 
					IF (@lastPhase ='FASE A GIRONI') THEN 
						signal sqlstate '45000' set message_text = 'Una partita giocata agli ottavi non può avere data antecedente ad una partita della fase a gironi';
					END IF;
				WHEN 'QUARTI' THEN
					IF(@lastPhase ='OTTAVI') THEN
						signal sqlstate '45000' set message_text = 'Una partita giocata ai quarti non può avere data antecedente ad una partita della fase a gironi o degli ottavi';
					END IF;
				WHEN 'SEMIFINALE' THEN
					IF(@lastPhase = 'QUARTI') THEN
						signal sqlstate '45000' set message_text = 'Una partita giocata alle semifinali non può avere data antecedente ad una partita della fase a gironi,degli ottavi o dei quarti';
					END IF;
				WHEN 'FINALE' THEN
					IF(@lastPhase = 'SEMIFINALE') THEN
						signal sqlstate '45000' set message_text = 'Una finale non può avere data antecedente ad una partita della fase a gironi,degli ottavi,dei quarti o delle semifinali';
					END IF;
			END CASE;
        ELSE 
			CASE new.fase
				WHEN 'FASE A GIRONI' THEN 
					IF (@lastPhase ='SEMIFINALE' OR @lastPhase = 'QUARTI' OR @lastPhase = 'FINALE' or @lastPhase = 'OTTAVI') THEN 
						signal sqlstate '45000' set message_text = 'Una partita giocata durante la fase a gironi non può avere data successiva rispetto alle partite nelle fasi seguenti';
					END IF;
				WHEN 'OTTAVI' THEN 
					IF (@lastPhase ='SEMIFINALE' OR @lastPhase = 'QUARTI' OR @lastPhase = 'FINALE') THEN 
						signal sqlstate '45000' set message_text = 'Una partita giocata agli ottavi non può avere data successiva alle partite delle fasi seguenti';
					END IF;
				WHEN 'QUARTI' THEN
					IF(@lastPhase ='SEMIFINALE' OR @lastPhase = 'FINALE') THEN
						signal sqlstate '45000' set message_text = 'Una partita giocata ai quarti non può avere data successiva alle partite giocate in semifinale o in finale';
					END IF;
				WHEN 'SEMIFINALE' THEN
					IF(@lastPhase = 'FINALE') THEN
						signal sqlstate '45000' set message_text = 'Una semifinale non può avere data successiva rispetto alla finale';
					END IF;
			END CASE;
		END IF;
	END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
